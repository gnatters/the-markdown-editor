// Generated by CoffeeScript 1.6.2
'use strict';angular.module('mdApp').service('dndFile', function($rootScope) {
  var default_drop,
    _this = this;

  default_drop = function(e) {
    var count, file, files, reader;

    files = e.dataTransfer.files;
    count = files.length;
    if (count) {
      if (file = (function() {
        var f, _i, _len;

        for (_i = 0, _len = files.length; _i < _len; _i++) {
          f = files[_i];
          if (/.(md|litcoffee)$/.test(f.name)) {
            return f;
          }
        }
      })()) {
        reader = new FileReader();
        reader.onload = _this.callbacks.fileload;
        return reader.readAsText(file);
      }
    }
  };
  this.callbacks = {
    active: function(e) {},
    inactive: function(e) {},
    fileload: function(e) {},
    drop: function(e) {},
    default_drop: default_drop
  };
  return {
    init: function(elm) {
      elm.addEventListener("dragenter", function(e) {
        $rootScope.kill_event(e);
        return _this.callbacks.active(e);
      });
      elm.addEventListener("dragover", function(e) {
        $rootScope.kill_event(e);
        return _this.callbacks.active(e);
      });
      elm.addEventListener("dragexit", function(e) {
        $rootScope.kill_event(e);
        return _this.callbacks.inactive(e);
      });
      return elm.addEventListener("drop", function(e) {
        $rootScope.kill_event(e);
        _this.callbacks.drop(e);
        return _this.callbacks.default_drop(e);
      });
    },
    onactive: function(cb) {
      return _this.callbacks.active = cb;
    },
    oninactive: function(cb) {
      return _this.callbacks.inactive = cb;
    },
    onfileload: function(cb) {
      return _this.callbacks.fileload = cb;
    },
    ondrop: function(cb, replace_default) {
      _this.callbacks.drop = cb;
      return _this.callbacks.default_drop = replace_default ? (function() {}) : default_drop;
    }
  };
});
