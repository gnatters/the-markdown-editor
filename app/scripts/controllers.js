// Generated by CoffeeScript 1.6.2
'use strict';
var default_md, mdApp;

default_md = "The Markdown Editor\n===\n\n* Edit's made on the left panel instantly render on the right\n* Drag the middle divider to resize panels\n* Drag and drop a `.md` or `.litcoffee` file into this window to load it\n* <span style='color:pink; background-color:darkred; padding:5px; border-radius:8px'>HTML is allowed too!</span>\n";

mdApp = angular.module('mdApp');

mdApp.controller('mdCtrl', function($scope, $rootScope, $http, $element, dndFile) {
  $scope.md_raw = default_md;
  $scope.dragover = false;
  dndFile.init($element[0]);
  dndFile.onactive(function() {
    return $scope.$apply(function() {
      return $scope.dragover = true;
    });
  });
  dndFile.oninactive(function() {
    return $scope.$apply(function() {
      return $scope.dragover = false;
    });
  });
  $element[0].addEventListener('mousemove', function() {
    return $scope.$apply(function() {
      return $scope.dragover = false;
    });
  });
  dndFile.ondrop((function(e) {
    return $scope.$apply(function() {
      return $scope.dragover = false;
    });
  }), false);
  dndFile.onfileload(function(e) {
    return $scope.$apply(function() {
      return $scope.md_raw = e.target.result;
    });
  });
  $scope.styles = {
    css: '',
    active: 'markdowncss',
    show: false,
    available: {
      markdowncss: $rootScope.corsproxy('http://kevinburke.bitbucket.org/markdowncss/markdown.css'),
      GitHub: '/styles/md/github.css'
    },
    external: ''
  };
  $scope.$watch('styles.active', function() {
    var css_location;

    css_location = $scope.styles.available[$scope.styles.active] ? $scope.styles.available[$scope.styles.active] : $scope.styles.active === 'external' ? $rootScope.corsproxy($scope.styles.external) : void 0;
    if (css_location) {
      return $http.get(css_location).then(function(response) {
        return $scope.styles.css = response.data;
      });
    }
  });
  $scope.$watch('styles.external', function() {
    var proxyurl;

    if ($scope.styles.active === 'external') {
      proxyurl = $rootScope.corsproxy($scope.styles.external);
      if (proxyurl) {
        return $http.get(proxyurl).then(function(response) {
          return $scope.styles.css = response.data;
        });
      }
    }
  });
  $scope.message = "";
  $scope.$watch('message', function() {
    var t0;

    t0 = new Date();
    return setTimeout((function() {
      return $scope.$apply(function() {
        if (new Date() - t0 >= 5000) {
          return $scope.message = "";
        }
      });
    }), 5000);
  });
  $scope.cols = {};
  (window.onresize = function() {
    return $scope.page_width = document.width;
  })();
  $scope.drag = {
    target: null,
    start: null,
    ratio_delta: 0
  };
  $element[0].onclick = function(e) {
    return $scope.$apply(function() {
      return $scope.styles.show = false;
    });
  };
  document.onmouseup = function() {
    $scope.drag.target = null;
    $scope.drag.start = null;
    $scope.drag.before = null;
    $scope.drag.after = null;
    return $scope.$digest();
  };
  return document.onmousemove = function(e) {
    var i, others, ratio_delta;

    if ($scope.drag.start && e.which) {
      ratio_delta = (e.clientX - $scope.drag.start) / $scope.page_width;
      $scope.cols[$scope.drag.target].ratio = $scope.drag.before + ratio_delta;
      others = (function() {
        var _results;

        _results = [];
        for (i in $scope.cols) {
          if (parseInt(i) !== $scope.drag.target + 1) {
            _results.push($scope.cols[i].ratio);
          }
        }
        return _results;
      })();
      $scope.cols[$scope.drag.target + 1].ratio = 1 - (others.length ? others.reduce(function(t, s) {
        return t + s;
      }) : 0);
      if ($scope.cols[$scope.drag.target].ratio < 0.1 || $scope.cols[$scope.drag.target + 1].ratio < 0.1) {
        return false;
      }
      $scope.cols[$scope.drag.target].percentage = "" + ($scope.cols[$scope.drag.target].ratio * 100) + "%";
      $scope.cols[$scope.drag.target + 1].percentage = "" + ($scope.cols[$scope.drag.target + 1].ratio * 100) + "%";
    } else {
      $scope.drag.target = null;
      $scope.drag.start = null;
      $scope.drag.before = null;
      $scope.drag.after = null;
    }
    return $scope.$digest();
  };
});
