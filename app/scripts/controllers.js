// Generated by CoffeeScript 1.6.2
'use strict';
var default_md;

default_md = "The Markdown Editor\n===\n\n* Edit's made on the left panel instantly render on the right\n* Drag the middle divider to resize panels\n* Drag and drop a `.md` or `.litcoffee` file into this window to load it\n* <span style='color:pink; background-color:darkred; padding:5px; border-radius:8px'>HTML is allowed too!</span>\n";

angular.module('mdApp').controller('mdCtrl', function($scope, $rootScope, $http, $element, dndFile) {
  $scope.md_raw = default_md;
  $scope.dragover = false;
  dndFile.init($element[0]);
  dndFile.onactive(function() {
    return $scope.$apply(function() {
      return $scope.dragover = true;
    });
  });
  dndFile.oninactive(function() {
    return $scope.$apply(function() {
      return $scope.dragover = false;
    });
  });
  $element[0].addEventListener('mousemove', function() {
    return $scope.$apply(function() {
      return $scope.dragover = false;
    });
  });
  dndFile.ondrop((function(e) {
    return $scope.$apply(function() {
      return $scope.dragover = false;
    });
  }), false);
  dndFile.onfileload(function(e) {
    return $scope.$apply(function() {
      return $scope.md_raw = e.target.result;
    });
  });
  $scope.style = {
    css: '',
    active: 'markdowncss',
    sheets: {
      markdowncss: {
        source: $rootScope.corsproxy('http://kevinburke.bitbucket.org/markdowncss/markdown.css')
      },
      GitHub: {
        source: '/styles/md/github.css'
      }
    },
    external: ''
  };
  $scope.$watch('style.active', function() {
    var style;

    if ($scope.style.active in $scope.style.sheets) {
      style = $scope.style.sheets[$scope.style.active];
      if (!style.css) {
        return $http.get(style.source).then(function(response) {
          return style.css = response.data;
        });
      }
    }
  });
  $scope.$watch('style.external', function() {
    if (!$scope.style.external) {
      return;
    }
    return $http.get($rootScope.corsproxy($scope.style.external)).then(function(response) {
      var i, name;

      i = 0;
      name = "external_" + i;
      while (name in $scope.style.sheets) {
        name = "external_" + (++i);
      }
      console.log($scope.style);
      $scope.style.sheets[name] = {
        source: $scope.style.external,
        css: response.data,
        external: true,
        edited: false
      };
      $scope.style.active = name;
      return $scope.style.external = '';
    });
  });
  $scope.message = "";
  return $scope.$watch('message', function() {
    var t0;

    t0 = new Date();
    return setTimeout((function() {
      return $scope.$apply(function() {
        if (new Date() - t0 >= 5000) {
          return $scope.message = "";
        }
      });
    }), 5000);
  });
});
