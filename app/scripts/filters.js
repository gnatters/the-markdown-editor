// Generated by CoffeeScript 1.6.2
'use strict';angular.module('mdApp').filter('md2html', function() {
  return function(md) {
    if (md && md.length) {
      return markdown.toHTML(md);
    } else {
      return '';
    }
  };
}).filter('scopeCSS', function() {
  return function(css, prefix) {
    var blacklist, doc, response, scope_selectors, styles;

    doc = document.implementation.createHTMLDocument("");
    styles = document.createElement("style");
    styles.innerText = css;
    doc.body.appendChild(styles);
    blacklist = /(^| )(head|title|link|style|script)($| )/;
    response = '';
    scope_selectors = function(rules) {
      var i, s, selector, selectors, _i, _ref, _results;

      if (!rules.length) {
        return;
      }
      _results = [];
      for (i = _i = 0, _ref = rules.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (rules[i].selectorText) {
          selectors = rules[i].selectorText.split(', ');
          selector = ((function() {
            var _j, _len, _results1;

            _results1 = [];
            for (_j = 0, _len = selectors.length; _j < _len; _j++) {
              s = selectors[_j];
              if (!blacklist.test(s)) {
                _results1.push(/(^| )(body|html)($| )/.test(s) ? s.replace(/(body|html)/, prefix) : "" + prefix + " " + s);
              }
            }
            return _results1;
          })()).join(', ');
          if (selector) {
            rules[i].selectorText = selector;
            _results.push(response += rules[i].cssText + ' ');
          } else {
            _results.push(void 0);
          }
        } else if (rules[i].media[0] === 'screen') {
          _results.push(scope_selectors(rules[i].cssRules));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    scope_selectors(styles.sheet.cssRules);
    return response;
  };
});
